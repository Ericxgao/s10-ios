# Customise this file, documentation can be found here:
# https://github.com/KrauseFx/fastlane/tree/master/docs
# All available actions: https://github.com/KrauseFx/fastlane/blob/master/docs/Actions.md
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# By default, fastlane will send which actions are used
# No personal data is shared, more information on https://github.com/fastlane/enhancer
# Uncomment the following line to opt out
# opt_out_usage

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version '1.41.1'

default_platform :ios


platform :ios do
  before_all do
    ENV['GYM_WORKSPACE'] = 'ios/Taylr.xcworkspace'
    ENV['GYM_SCHEME'] = 'Taylr'
    # ENV['SLACK_URL'] = 'https://hooks.slack.com/services/...'
    # cocoapods
    # increment_build_number
  end

  lane :deps do
    cocoapods(podfile: 'ios/', verbose: true)
  end

  desc 'Runs all the tests'
  lane :test do
    puts 'TODO: Add some tests please'
    increment_build_number(xcodeproj: 'ios/Taylr.xcodeproj', build_number: '1232d')
    # xctool # run the tests of your app
    # snapshot
  end

  private_lane :build do |options|
    # Configure Build number if needed
    circle_build_number = ENV['CIRCLE_BUILD_NUM']
    if circle_build_number then
      case ENV['CIRCLE_BRANCH']
      when 'master'
        build_number = "#{circle_build_number}d"
      when 'prod'
        build_number = circle_build_number
      else
        build_number = "#{circle_build_number}*"
      end
      increment_build_number(xcodeproj: 'ios/Taylr.xcodeproj', build_number: build_number)
    end

    # Other build configuration
    case options[:variant]
    when 'dev'
      configuration = 'Debug'
      export_method = 'development'
    when 'adhoc'
      configuration = 'Release'
      export_method = 'ad-hoc'
    when 'appstore'
      configuration = 'Release'
      export_method = 'app-store'
    end
    gym(configuration: configuration, export_method: export_method)
  end

  desc 'Make a new dev build (Debug Config)'
  lane :dev do
    build(variant: 'dev')
  end

  desc 'Make a new adhoc build (Release Cnfig)'
  lane :adhoc do
    build(variant: 'adhoc')
  end

  desc 'Make a new app store build (Release Config, TestFlight-table)'
  lane :appstore do
    build(variant: 'appstore')
  end


  desc 'Submit a new Beta Build to Apple TestFlight'
  desc 'This will also make sure the profile is up to date'
  lane :beta do
    sigh
    gym(scheme: 'Taylr') # Build your app - more options available
    pilot

    # sh 'your_script.sh'
    # You can also use other beta testing services here
  end

  desc 'Deploy a new version to the App Store'
  lane :deploy do
    # snapshot
    sigh
    gym(scheme: 'Taylr') # Build your app - more options available
    deliver(force: true)
    # frameit
  end

  # You can define as many lanes as you want

  after_all do |lane|
    # This block is called, only if the executed lane was successful
    
    # slack(
    #   message: 'Successfully deployed new App Update.'
    # )
  end

  error do |lane, exception|
    # slack(
    #   message: exception.message,
    #   success: false
    # )
  end
end

# Build Dev
# Build Prod
# 

# More information about multiple platforms in fastlane: https://github.com/KrauseFx/fastlane/blob/master/docs/Platforms.md
# All available actions: https://github.com/KrauseFx/fastlane/blob/master/docs/Actions.md

